"""header and aside in the preferences(), remove unnecessary fields from user

Revision ID: 105dc3e59977
Revises: cc6053a120e
Create Date: 2015-08-22 14:45:04.920677

"""

# revision identifiers, used by Alembic.
revision = '105dc3e59977'
down_revision = 'cc6053a120e'

from alembic import op
import sqlalchemy as sa


def upgrade():
    op.add_column('users', sa.Column('premium', sa.Boolean(), nullable=True))

    op.execute('''
CREATE OR REPLACE VIEW prefs_cards AS
  SELECT
    cards.name,
    cards."desc",
    cards.attachments,
    cards.checklists,
    boards.subdomain,
    custom_domains.domain,
    cards.cover
   FROM cards
     JOIN lists ON cards.list_id::text = lists.id::text AND lists.name = '_preferences'::text
     JOIN boards ON lists.board_id::text = boards.id::text
     LEFT JOIN custom_domains ON custom_domains.board_id::text = boards.id::text;
    ''')

    op.execute('''
CREATE OR REPLACE VIEW custom_domains AS
  SELECT cards."desc" AS domain,
    boards.id AS board_id
   FROM cards
     JOIN lists ON cards.list_id::text = lists.id::text AND lists.name = '_preferences'::text AND cards.name = 'domain'::text
     JOIN boards ON lists.board_id::text = boards.id::text
     JOIN users ON boards.user_id::text = users.id::text
  WHERE users.premium AND cards."desc" != '';
    ''')

    op.execute('''
CREATE OR REPLACE FUNCTION preferences(text) RETURNS json as $$
DECLARE prefs json;
BEGIN

WITH pcards AS (
  SELECT * FROM prefs_cards WHERE domain = $1 OR subdomain = $1
), includes AS (
  SELECT attachment->>'url' AS url
  FROM
    (SELECT jsonb_array_elements(pcards.attachments->'attachments') AS attachment
     FROM pcards
     WHERE name = 'includes')t
  UNION SELECT markdown_link(checkitem->>'name')->>'url' AS url
  FROM
    (SELECT jsonb_array_elements(c->'checkItems') AS checkitem
       FROM
         (SELECT jsonb_array_elements(checklists->'checklists') AS c
          FROM pcards
          WHERE name = 'includes')f
    )p
    WHERE checkitem->>'state' = 'complete'
), nav AS (
  SELECT markdown_link(checkitem->>'name') AS url
  FROM
    (SELECT jsonb_array_elements(c->'checkItems') AS checkitem
     FROM
       (SELECT jsonb_array_elements(jsonb_extract_path(checklists, 'checklists')) AS c
        FROM pcards
        WHERE name = 'nav')f
    )p
)

SELECT json_object_agg(key, value) INTO prefs
FROM (
  SELECT key, value::json FROM
      (
         (SELECT 'includes' AS key,
                 to_json(array_agg(url))::text AS value
          FROM includes)
      UNION
         (SELECT 'nav' AS key,
                 to_json(array_agg(url))::text AS value
          FROM nav)
      UNION 
         (SELECT 'header' AS key,
                 row_to_json(h)::text AS value
          FROM (SELECT "desc" AS text, cover AS image FROM pcards WHERE name = 'header')h)
      UNION 
         (SELECT pcards.name AS key,
                 to_json(pcards.desc::text)::text AS value
          FROM pcards
          WHERE pcards.name IN ('posts-per-page', 'favicon', 'excerpts', 'aside', 'domain'))
      )kv
)kvj
;

RETURN prefs;

END;
$$  LANGUAGE plpgsql;
    ''')

    ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('boards', 'name',
               existing_type=sa.TEXT(),
               nullable=False)
    op.alter_column('cards', 'desc',
               existing_type=sa.TEXT(),
               nullable=False)
    op.alter_column('comments', 'card_id',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
    op.drop_column('users', 'gravatarHash')
    op.drop_column('users', 'bio')
    op.drop_column('users', 'avatarHash')
    op.drop_column('users', 'custom_domain_paypal_agreement_id')
    op.drop_column('users', 'token')
    op.drop_column('users', 'fullName')
    op.drop_column('users', 'custom_domain_enabled')
    ### end Alembic commands ###

def downgrade():
    op.add_column('users', sa.Column('custom_domain_enabled', sa.BOOLEAN(), autoincrement=False, nullable=True))

    op.execute('''
CREATE OR REPLACE VIEW custom_domains AS
  SELECT cards."desc" AS domain,
    boards.id AS board_id
   FROM cards
     JOIN lists ON cards.list_id::text = lists.id::text AND lists.name = '_preferences'::text AND cards.name = 'domain'::text
     JOIN boards ON lists.board_id::text = boards.id::text
     JOIN users ON boards.user_id::text = users.id::text
  WHERE users.custom_domain_enabled;
    ''')

    op.execute('''
CREATE OR REPLACE FUNCTION preferences(text) RETURNS json as $$
DECLARE prefs json;
BEGIN

WITH pcards AS (
  SELECT * FROM prefs_cards WHERE domain = $1 OR subdomain = $1
), includes AS (
  SELECT attachment->>'url' AS url
  FROM
    (SELECT jsonb_array_elements(pcards.attachments->'attachments') AS attachment
     FROM pcards
     WHERE name = 'includes')t
  UNION SELECT markdown_link(checkitem->>'name')->>'url' AS url
  FROM
    (SELECT jsonb_array_elements(c->'checkItems') AS checkitem
       FROM
         (SELECT jsonb_array_elements(checklists->'checklists') AS c
          FROM pcards
          WHERE name = 'includes')f
    )p
    WHERE checkitem->>'state' = 'complete'
), nav AS (
  SELECT markdown_link(checkitem->>'name') AS url
  FROM
    (SELECT jsonb_array_elements(c->'checkItems') AS checkitem
     FROM
       (SELECT jsonb_array_elements(jsonb_extract_path(checklists, 'checklists')) AS c
        FROM pcards
        WHERE name = 'nav')f
    )p
)

SELECT json_object_agg(key, value) INTO prefs
FROM (
  SELECT key, value::json FROM
      (
         (SELECT 'includes' AS key,
                 to_json(array_agg(url))::text AS value
          FROM includes)
      UNION
         (SELECT 'nav' AS key,
                 to_json(array_agg(url))::text AS value
          FROM nav)
       UNION 
         (SELECT pcards.name AS key,
                 to_json(pcards.desc::text)::text AS value
          FROM pcards
          WHERE length(pcards.desc) < 100
            AND pcards.name NOT IN ('nav', 'includes'))
      )kv
)kvj
;

RETURN prefs;

END;
$$  LANGUAGE plpgsql;
    ''')

    ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('fullName', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('token', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('custom_domain_paypal_agreement_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('avatarHash', sa.VARCHAR(length=32), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('bio', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('gravatarHash', sa.VARCHAR(length=32), autoincrement=False, nullable=True))
    op.drop_column('users', 'premium')
    op.alter_column('comments', 'card_id',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
    op.alter_column('cards', 'desc',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('boards', 'name',
               existing_type=sa.TEXT(),
               nullable=True)
    ### end Alembic commands ###

